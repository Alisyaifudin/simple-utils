{
  "version": 3,
  "sources": ["../../../client/share/elem$.ts"],
  "sourcesContent": ["type Effect<T extends Element, S = undefined> = S extends undefined\n\t? (comp: T, state?: undefined) => void\n\t: (comp: T, state: S) => void;\n\nexport type Elem$<T extends Element, S = undefined> = {\n\treadonly get: T;\n\tset(transform: (old: T) => T, updateState?: S extends undefined ? never : (old: S) => S): void;\n\tstate: S;\n\treplaceWith(comp: T): void;\n\treplace(raw: string, querySelector?: string): void;\n\treplaceInner(raw: string, querySelector?: string): void;\n\treplaceIfAny(raw: string, querySelector?: string): void;\n\tinnerHTML: string;\n\ttextContent: string;\n\touterHTML: string;\n\taddEffect(effect: Effect<T, S>, run?: boolean): void;\n};\n\nexport function elem$<T extends Element, S = undefined>(component: T, state?: S): Elem$<T, S> {\n\tconst effects: Effect<T, S>[] = [];\n\treturn {\n\t\tget get() {\n\t\t\treturn component;\n\t\t},\n\t\treplaceWith(comp) {\n\t\t\tcomponent.replaceWith(comp);\n\t\t\tcomponent = comp;\n\t\t\teffects.forEach((effect) => effect(component, state as any));\n\t\t},\n\t\treplace(raw, querySelector) {\n\t\t\tconst template = document.createElement(\"template\");\n\t\t\ttemplate.innerHTML = raw;\n\t\t\tlet content = template.content.firstChild as T | null;\n\t\t\tif (querySelector) {\n\t\t\t\tcontent = template.content.querySelector<T>(querySelector);\n\t\t\t} else if (component.id !== \"\") {\n\t\t\t\tconst proposed = template.content.querySelector<T>(\"#\" + component.id);\n\t\t\t\tif (proposed !== null) content = proposed;\n\t\t\t}\n\t\t\tif (content === null) {\n\t\t\t\tconsole.error(\"No content\", template.content);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcomponent.replaceWith(content);\n\t\t\tcomponent = content;\n\t\t\teffects.forEach((effect) => effect(component, state as any));\n\t\t},\n\t\treplaceInner(raw, querySelector) {\n\t\t\tconst template = document.createElement(\"template\");\n\t\t\ttemplate.innerHTML = raw;\n\t\t\tlet content = null as null | Element;\n\t\t\tif (querySelector) {\n\t\t\t\tcontent = template.content.querySelector(querySelector);\n\t\t\t} else if (component.id !== \"\") {\n\t\t\t\tconst proposed = template.content.querySelector(\"#\" + component.id);\n\t\t\t\tif (proposed !== null) content = proposed;\n\t\t\t}\n\t\t\tcomponent.innerHTML = content?.outerHTML ?? \"\";\n\t\t\teffects.forEach((effect) => effect(component, state as any));\n\t\t},\n\t\treplaceIfAny(raw, querySelector) {\n\t\t\tconst template = document.createElement(\"template\");\n\t\t\ttemplate.innerHTML = raw;\n\t\t\tlet content = null as null | T;\n\t\t\tif (querySelector) {\n\t\t\t\tcontent = template.content.querySelector<T>(querySelector);\n\t\t\t} else if (component.id !== \"\") {\n\t\t\t\tconst proposed = template.content.querySelector<T>(\"#\" + component.id);\n\t\t\t\tif (proposed !== null) content = proposed;\n\t\t\t}\n\t\t\tif (content === null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcomponent.replaceWith(content);\n\t\t\tcomponent = content;\n\t\t\teffects.forEach((effect) => effect(component, state as any));\n\t\t},\n\t\tset textContent(text: string) {\n\t\t\tcomponent.textContent = text;\n\t\t\teffects.forEach((effect) => effect(component, state as any));\n\t\t},\n\t\tset outerHTML(raw: string) {\n\t\t\tcomponent.outerHTML = raw;\n\t\t\teffects.forEach((effect) => effect(component, state as any));\n\t\t},\n\t\tset innerHTML(raw: string) {\n\t\t\tcomponent.innerHTML = raw;\n\t\t\teffects.forEach((effect) => effect(component, state as any));\n\t\t},\n\t\tset state(s: S) {\n\t\t\tstate = s;\n\t\t\teffects.forEach((effect) => effect(component, state as any));\n\t\t},\n\t\tset(transform, updateState) {\n\t\t\tcomponent = transform(component);\n\t\t\tif (updateState !== undefined && state !== undefined) {\n\t\t\t\tstate = updateState(state);\n\t\t\t}\n\t\t\teffects.forEach((effect) => effect(component, state as any));\n\t\t},\n\t\taddEffect(effect, run = false) {\n\t\t\teffects.push(effect);\n\t\t\tif (run) {\n\t\t\t\teffect(component, state as any);\n\t\t\t}\n\t\t},\n\t};\n}\n"],
  "mappings": ";AAkBO,SAAS,MAAwC,WAAc,OAAwB;AAC7F,QAAM,UAA0B,CAAC;AACjC,SAAO;AAAA,IACN,IAAI,MAAM;AACT,aAAO;AAAA,IACR;AAAA,IACA,YAAY,MAAM;AACjB,gBAAU,YAAY,IAAI;AAC1B,kBAAY;AACZ,cAAQ,QAAQ,CAAC,WAAW,OAAO,WAAW,KAAY,CAAC;AAAA,IAC5D;AAAA,IACA,QAAQ,KAAK,eAAe;AAC3B,YAAM,WAAW,SAAS,cAAc,UAAU;AAClD,eAAS,YAAY;AACrB,UAAI,UAAU,SAAS,QAAQ;AAC/B,UAAI,eAAe;AAClB,kBAAU,SAAS,QAAQ,cAAiB,aAAa;AAAA,MAC1D,WAAW,UAAU,OAAO,IAAI;AAC/B,cAAM,WAAW,SAAS,QAAQ,cAAiB,MAAM,UAAU,EAAE;AACrE,YAAI,aAAa,KAAM,WAAU;AAAA,MAClC;AACA,UAAI,YAAY,MAAM;AACrB,gBAAQ,MAAM,cAAc,SAAS,OAAO;AAC5C;AAAA,MACD;AACA,gBAAU,YAAY,OAAO;AAC7B,kBAAY;AACZ,cAAQ,QAAQ,CAAC,WAAW,OAAO,WAAW,KAAY,CAAC;AAAA,IAC5D;AAAA,IACA,aAAa,KAAK,eAAe;AA/CnC;AAgDG,YAAM,WAAW,SAAS,cAAc,UAAU;AAClD,eAAS,YAAY;AACrB,UAAI,UAAU;AACd,UAAI,eAAe;AAClB,kBAAU,SAAS,QAAQ,cAAc,aAAa;AAAA,MACvD,WAAW,UAAU,OAAO,IAAI;AAC/B,cAAM,WAAW,SAAS,QAAQ,cAAc,MAAM,UAAU,EAAE;AAClE,YAAI,aAAa,KAAM,WAAU;AAAA,MAClC;AACA,gBAAU,aAAY,wCAAS,cAAT,YAAsB;AAC5C,cAAQ,QAAQ,CAAC,WAAW,OAAO,WAAW,KAAY,CAAC;AAAA,IAC5D;AAAA,IACA,aAAa,KAAK,eAAe;AAChC,YAAM,WAAW,SAAS,cAAc,UAAU;AAClD,eAAS,YAAY;AACrB,UAAI,UAAU;AACd,UAAI,eAAe;AAClB,kBAAU,SAAS,QAAQ,cAAiB,aAAa;AAAA,MAC1D,WAAW,UAAU,OAAO,IAAI;AAC/B,cAAM,WAAW,SAAS,QAAQ,cAAiB,MAAM,UAAU,EAAE;AACrE,YAAI,aAAa,KAAM,WAAU;AAAA,MAClC;AACA,UAAI,YAAY,MAAM;AACrB;AAAA,MACD;AACA,gBAAU,YAAY,OAAO;AAC7B,kBAAY;AACZ,cAAQ,QAAQ,CAAC,WAAW,OAAO,WAAW,KAAY,CAAC;AAAA,IAC5D;AAAA,IACA,IAAI,YAAY,MAAc;AAC7B,gBAAU,cAAc;AACxB,cAAQ,QAAQ,CAAC,WAAW,OAAO,WAAW,KAAY,CAAC;AAAA,IAC5D;AAAA,IACA,IAAI,UAAU,KAAa;AAC1B,gBAAU,YAAY;AACtB,cAAQ,QAAQ,CAAC,WAAW,OAAO,WAAW,KAAY,CAAC;AAAA,IAC5D;AAAA,IACA,IAAI,UAAU,KAAa;AAC1B,gBAAU,YAAY;AACtB,cAAQ,QAAQ,CAAC,WAAW,OAAO,WAAW,KAAY,CAAC;AAAA,IAC5D;AAAA,IACA,IAAI,MAAM,GAAM;AACf,cAAQ;AACR,cAAQ,QAAQ,CAAC,WAAW,OAAO,WAAW,KAAY,CAAC;AAAA,IAC5D;AAAA,IACA,IAAI,WAAW,aAAa;AAC3B,kBAAY,UAAU,SAAS;AAC/B,UAAI,gBAAgB,UAAa,UAAU,QAAW;AACrD,gBAAQ,YAAY,KAAK;AAAA,MAC1B;AACA,cAAQ,QAAQ,CAAC,WAAW,OAAO,WAAW,KAAY,CAAC;AAAA,IAC5D;AAAA,IACA,UAAU,QAAQ,MAAM,OAAO;AAC9B,cAAQ,KAAK,MAAM;AACnB,UAAI,KAAK;AACR,eAAO,WAAW,KAAY;AAAA,MAC/B;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
